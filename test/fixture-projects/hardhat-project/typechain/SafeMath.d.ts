/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SafeMathInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,uint256)": FunctionFragment;
    "div(uint256,uint256)": FunctionFragment;
    "mul(uint256,uint256)": FunctionFragment;
    "sub(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "div",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sub",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "div", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sub", data: BytesLike): Result;

  events: {};
}

export class SafeMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SafeMathInterface;

  functions: {
    add(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "add(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    div(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "div(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mul(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mul(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    sub(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "sub(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  add(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "add(uint256,uint256)"(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  div(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "div(uint256,uint256)"(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mul(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mul(uint256,uint256)"(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sub(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sub(uint256,uint256)"(
    num1: BigNumberish,
    num2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    add(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "add(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "div(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mul(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sub(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sub(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    add(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "add(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "div(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mul(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sub(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sub(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    div(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "div(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mul(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mul(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sub(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sub(uint256,uint256)"(
      num1: BigNumberish,
      num2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
